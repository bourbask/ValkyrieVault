# .github/workflows/infrastructure.yml
name: Infrastructure Management

on:
  push:
    branches: [main, staging, develop]
    paths: ["terraform/**"]
  pull_request:
    branches: [main, staging, develop]
    paths: ["terraform/**"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - staging
          - production

env:
  TF_VERSION: "1.6.0"
  AWS_REGION: "eu-west-3"

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      directory: ${{ steps.env.outputs.directory }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "directory=terraform/environments/${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "directory=terraform/environments/production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "directory=terraform/environments/staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "directory=terraform/environments/development" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "directory=terraform/environments/development" >> $GITHUB_OUTPUT
          fi

  terraform-plan:
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    defaults:
      run:
        working-directory: ${{ needs.determine-environment.outputs.directory }}
    outputs:
      plan-exists: ${{ steps.plan.outputs.plan-exists }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: tofu init

      - name: Terraform Validate
        run: tofu validate

      - name: Terraform Plan
        id: plan
        run: |
          tofu plan -detailed-exitcode -out=tfplan || exit_code=$?
          if [[ $exit_code -eq 1 ]]; then
            echo "❌ Terraform plan failed"
            exit 1
          elif [[ $exit_code -eq 2 ]]; then
            echo "✅ Terraform plan has changes"
            echo "plan-exists=true" >> $GITHUB_OUTPUT
          else
            echo "✅ No changes detected"
            echo "plan-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload plan
        if: steps.plan.outputs.plan-exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ needs.determine-environment.outputs.environment }}
          path: ${{ needs.determine-environment.outputs.directory }}/tfplan
          retention-days: 1

  terraform-apply:
    needs: [determine-environment, terraform-plan]
    if: |
      github.event_name == 'push' && 
      needs.terraform-plan.outputs.plan-exists == 'true' &&
      (
        (github.ref == 'refs/heads/main') ||
        (github.ref == 'refs/heads/staging') ||
        (github.ref == 'refs/heads/develop')
      )
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    defaults:
      run:
        working-directory: ${{ needs.determine-environment.outputs.directory }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: tofu init

      - name: Download plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ needs.determine-environment.outputs.environment }}
          path: ${{ needs.determine-environment.outputs.directory }}

      - name: Terraform Apply
        run: tofu apply tfplan

      - name: Save outputs
        id: outputs
        run: |
          echo "s3_bucket=$(tofu output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "secrets_arn=$(tofu output -raw secrets_manager_arn)" >> $GITHUB_OUTPUT

  deploy-application:
    needs: [determine-environment, terraform-apply]
    if: always() && (needs.terraform-apply.result == 'success' || needs.terraform-apply.result == 'skipped')
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}

    steps:
      - uses: actions/checkout@v4

      - name: Get VPS host
        id: vps
        run: |
          case "${{ needs.determine-environment.outputs.environment }}" in
            "production")
              echo "host=${{ secrets.VPS_HOST_PROD }}" >> $GITHUB_OUTPUT
              echo "domain=${{ secrets.DOMAIN_PROD }}" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "host=${{ secrets.VPS_HOST_STAGING }}" >> $GITHUB_OUTPUT
              echo "domain=${{ secrets.DOMAIN_STAGING }}" >> $GITHUB_OUTPUT
              ;;
            "development")
              echo "host=${{ secrets.VPS_HOST_DEV }}" >> $GITHUB_OUTPUT
              echo "domain=${{ secrets.DOMAIN_DEV }}" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ steps.vps.outputs.host }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            ENV="${{ needs.determine-environment.outputs.environment }}"
            cd "/opt/vaultwarden-${ENV}" || mkdir -p "/opt/vaultwarden-${ENV}" && cd "/opt/vaultwarden-${ENV}"

            # Clone ou mise à jour
            if [ ! -d ".git" ]; then
              git clone -b ${{ github.ref_name }} ${{ github.server_url }}/${{ github.repository }} .
            else
              git fetch origin
              git checkout ${{ github.ref_name }}
              git pull origin ${{ github.ref_name }}
            fi

            # Configuration de l'environnement
            export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}

            # Récupération des secrets
            aws secretsmanager get-secret-value \
              --secret-id "vaultwarden-${ENV}-config" \
              --query SecretString --output text > .env.tmp
              
            # Génération du .env
            python3 -c "
            import json, os
            secrets = json.loads(open('.env.tmp').read())
            with open('.env', 'w') as f:
                f.write(f'ENVIRONMENT=${ENV}\n')
                f.write(f'DOMAIN=${{ steps.vps.outputs.domain }}\n')
                for k, v in secrets.items():
                    f.write(f'{k.upper()}={v}\n')
            "
            rm .env.tmp

            # Déploiement Docker
            docker-compose -f docker-compose.${ENV}.yml down || true
            docker-compose -f docker-compose.${ENV}.yml pull
            docker-compose -f docker-compose.${ENV}.yml up -d

      - name: Health check
        run: |
          sleep 30
          case "${{ needs.determine-environment.outputs.environment }}" in
            "production") curl -f "${{ secrets.DOMAIN_PROD }}/alive" ;;
            "staging") curl -f "${{ secrets.DOMAIN_STAGING }}/alive" ;;
            "development") curl -f "${{ secrets.DOMAIN_DEV }}/alive" ;;
          esac
